Transform: 
  - 'AWS::LanguageExtensions'
  - 'AWS::Serverless-2016-10-31'
Description: This template Creates Lambda function and Cloudwatchrule.
Parameters:
  ResourceNamePrefix:
    Type: String
    Default: NDS-CYNC
    Description: Prefix for the name of the resource
  Project:
    Type: String
    Description: Enter a value for tag Project
    Default: NDS-CYNC
  Environment:
    Type: String
    Default: STAGING
    AllowedValues:
      - POC
      - DEV
      - DEV2
      - STAGING
      - PRESTAGING
      - PRODSUPPORT
      - UAT
      - PROD
    Description: Choose the environment where the service is being deployed.
  ServiceName:
    Type: String
    Default: Canadian-Prime-Rate
    Description: Enter the service name of the current stack.
  Owner:
    Type: String
    Default: NDS
    Description: Enter a value for tag Owner
  ApplicationID:
    Type: String
    Default: CANADIAN-PRIME
    Description: Enter a value for tag ApplicationID
  InfoClassification:
    Type: String
    Description: Enter a value for tag InfoClassification
    Default: Internal
  Compliance:
    Type: String
    Description: Enter a value for tag Compliance
    Default: SOC2
  LambdaMemory:
    Type: String
    Description: Specify the Memory size required for lambda function to run.
    Default: '512'
    AllowedValues:
      - '128'
      - '192'
      - '256'
      - '320'
      - '384'
      - '448'
      - '512'
      - '576'
      - '640'
      - '704'
      - '768'
      - '832'
      - '896'
      - '960'
      - '1024'
      - '1088'
      - '1152'
      - '1216'
      - '1280'
      - '1344'
      - '1408'
      - '1472'
      - '1536'
      - '2000'
  AwsSecretName:
    Type: String
    Default: NDS-CYNC-STAGING-Audit-DBConfiguration-E31Q5o
    Description: Specify Secretid from SecretsManagerARN to fetch the required values.
  Timeout:
    Type: String
    Description: Enter the lambda function timeout in seconds.
    Default: '600'
    AllowedPattern: '^[0-9]{1,3}'
  # ScheduleExpression:
  #   Type: CommaDelimitedList
  #   Description: "Cron Expression based triggering lambda funtion. For Example: '''cron(30 15 ? * MON-FRI *)'''"
  Runtime:
    Type: String
    Description: Lambda Runtime version.
    Default: ruby2.7
    AllowedValues:
      - ruby2.7
      - python3.8
      - python3.9
      - java8
      - python3.6
      - nodejs16.x
      - java11
  Handler:
    Type: String
    Description: Specify handler string based on your lambda function file name.
    Default: handler.main
  AwsRegionName:
    Type: String
    Description: Specify the value of AWS_REGION_NAME
    Default: us-east-1
  RailsEnv:
    Type: String
    Description: Specify the value of RAILS_ENV
    Default: staging
  State:
    Type: String
    Description: Enter the value for State
    AllowedValues:
    - ENABLED
    - DISABLED
    Default: ENABLED
  CommonSGExportName:
    Type: String
    Description: Specify the security group name.
    Default: NDS-CYNC-STAGING-COMMON-LAMBDA-SG

Mappings:
  Environments:
    POC:
      RetentionInDays: 7
      Subnets:
      - subnet-0517c1dbe19aaa70e
      - subnet-00578498d20bcfd71
    DEV2:
      Subnets:
      - subnet-5d910c71
      - subnet-4265a87d
      - subnet-5f085905
      VpcId: vpc-70d8bd09
      RetentionInDays: 7
    DEV:
      Subnets:
      - subnet-5d910c71
      - subnet-4265a87d
      - subnet-5f085905
      VpcId: vpc-70d8bd09
      RetentionInDays: 7
    STAGING:
      Subnets:
      - subnet-b7bf529b
      - subnet-cd72ae85
      - subnet-c4bb6f99
      VpcId: vpc-9c151dfa
      RetentionInDays: 30
    PRESTAGING:
      Subnets:
      - subnet-b7bf529b
      - subnet-cd72ae85
      - subnet-c4bb6f99
      VpcId: vpc-9c151dfa
      RetentionInDays: 30
    UAT:
      Subnets:
      - subnet-09d856d1ef81ed834
      - subnet-00a46aaef3ee378fa
      - subnet-0f2d3cb9a4a7d1d44
      VpcId: vpc-02123994114f1a98d
      RetentionInDays: 731
    PROD:
      Subnets:
      - subnet-4b95272c
      - subnet-a900be87
      - subnet-11ff891e
      VpcId: vpc-b53bfadf
      RetentionInDays: 731
      
Resources:
  'Fn::ForEach::Lambda':
    - Schedule
    - !GetAtt ['cron(15 13 ? * MON-FRI *)', 'cron(30 19 ? * MON-FRI *)']
    - Lambda:
        Type: AWS::Serverless::Function
        Properties:
          FunctionName:
            Fn::Sub: ${Project}-${Environment}-${ServiceName}-Lambda
          Description: Lambda function to run the Canadian prime Rate lambda functionality.
          Handler:
            Ref: Handler
          MemorySize:
            Ref: LambdaMemory
          CodeUri: ./CanadianPrime/Code
          Role:
            Fn::GetAtt:
            - LambdaRole
            - Arn
          Runtime:
            Ref: Runtime
          Timeout:
            Ref: Timeout
          VpcConfig:
            SecurityGroupIds:
            - Fn::ImportValue:
                Ref: CommonSGExportName
            SubnetIds:
              Fn::FindInMap:
              - Environments
              - Ref: Environment
              - Subnets
          Environment:
            Variables:
              AWS_REGION_NAME:
                Ref: AwsRegionName
              AWS_SECRET_NAME:
                Ref: AwsSecretName
              RAILS_ENV:
                Ref: RailsEnv
          Events:
            ScheduleEvent:
              Type: Schedule
              Properties:
                Name:
                  Fn::Sub: ${Project}-${Environment}-${ServiceName}-Lambda-Schedule-Event
                Schedule: !Ref
                  Fn::Sub: ${Schedule}
                State:
                  Ref: State
          Tags:
            Name:
              Fn::Sub: ${Project}-${Environment}-${ServiceName}-Lambda
            ApplicationRole:
              Fn::Sub: ${ApplicationID}-FUNC
            Environment:
              Ref: Environment
            ApplicationID:
              Ref: ApplicationID
            Project:
              Ref: Project
            Owner:
              Ref: Owner
            InfoClassification:
              Ref: InfoClassification
            Compliance:
              Ref: Compliance
          
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${Project}-${Environment}-${ServiceName}-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /
      Policies:
      - PolicyName:
          Fn::Sub: ${Project}-${Environment}-${ServiceName}-Policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource:
              Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AwsSecretName}
          - Effect: Allow
            Action: secretsmanager:ListSecrets
            Resource: '*'
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Project}-${Environment}-${ServiceName}-Role
      - Key: Environment
        Value:
          Ref: Environment
      - Key: ApplicationRole
        Value:
          Fn::Sub: ${ApplicationID}-ROLE
      - Key: ApplicationID
        Value:
          Ref: ApplicationID
      - Key: Project
        Value:
          Ref: Project
      - Key: Owner
        Value:
          Ref: Owner
      - Key: InfoClassification
        Value:
          Ref: InfoClassification
      - Key: Compliance
        Value:
          Ref: Compliance
Outputs:
  Lambda:
    Value: !Ref Lambda
