Transform: AWS::Serverless-2016-10-31
Description: This Template Creates Lambda which reads CSV.
Parameters: 
  ResourceNamePrefix:
    Type: String
    Default: NDS-CYNC
    Description: Prefix for the name of the resource
  Project:
    Type: String
    Description: Enter a value for tag Project
    Default: NDS-CYNC
  EnvironmentName:
    Type: String
    Default: STAGING
    AllowedValues:
      - POC
      - DEV
      - DEV2
      - STAGING
      - PRESTAGING
      - PRODSUPPORT
      - UAT
      - PROD
    Description: Choose the environment where the service is being deployed.
  ServiceName:
    Type: String
    Default: Data
    Description: Enter the service name of the current stack.
  Owner:
    Type: String
    Default: NDS
    Description: Enter a value for tag Owner
  ApplicationID:
    Type: String
    Default: Data-Authorizer
    Description: Enter a value for tag ApplicationID
  InfoClassification:
    Type: String
    Description: Enter a value for tag InfoClassification
    Default: Internal
  Compliance:
    Type: String
    Description: Enter a value for tag Compliance
    Default: SOC2
  LambdaMemory:
    Type: String
    Description: Specify the Memory size required for lambda function to run.
    Default: '128'
    AllowedValues:
      - '128'
      - '192'
      - '256'
      - '320'
      - '384'
      - '448'
      - '512'
      - '576'
      - '640'
      - '704'
      - '768'
      - '832'
      - '896'
      - '960'
      - '1024'
      - '1088'
      - '1152'
      - '1216'
      - '1280'
      - '1344'
      - '1408'
      - '1472'
      - '1536'
      - '2000'
  Timeout:
    Type: String
    Description: Enter the lambda function timeout in seconds.
    Default: '300'
    AllowedPattern: '^[0-9]{1,3}'
  CommonSGExportName:
    Type: String
    Description: Specify the Common Security group
    Default: NDS-CYNC-STAGING-COMMON-LAMBDA-SG

Mappings:
  Environments:
    POC:
      RetentionInDays: 7
      Subnets:
      - subnet-0517c1dbe19aaa70e
      - subnet-00578498d20bcfd71
    DEV:
      RetentionInDays: 7
      Subnets: 
        - subnet-5d910c71
        - subnet-4265a87d
        - subnet-5f085905
    DEV2:
      Subnets: 
        - subnet-5d910c71
        - subnet-4265a87d
        - subnet-5f085905
      RetentionInDays: 7
    STAGING:
      Subnets:
        - subnet-b7bf529b
        - subnet-cd72ae85
        - subnet-c4bb6f99
      RetentionInDays: 30
    PRESTAGING:
      Subnets:
        - subnet-b7bf529b
        - subnet-cd72ae85
        - subnet-c4bb6f99
      RetentionInDays: 30
    UAT:
      Subnets:
        - subnet-0f2d3cb9a4a7d1d44
        - subnet-00a46aaef3ee378fa
        - subnet-09d856d1ef81ed834
      RetentionInDays: 731
    PROD:
      Subnets:
        - subnet-15515b4f
        - subnet-61b51b5c
        - subnet-a2d424d4
      RetentionInDays: 731    
  
Resources:
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Lambda-Role11'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Lambda-Policy11'
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:GetMetricStatistics'
                  - 's3:PutObject'
                  - 's3:GetObjectAcl'
                  - 's3:GetObject'
                  - 's3:PutObjectVersionAcl'
                  - 's3:GetObjectVersionAcl'
                  - 's3:ListBucket'
                  - 's3:GetBucketVersioning'
                  - 's3:GetBucketAcl'
                  - 's3:PutObjectAcl'
                  - 's3:GetObjectVersion'
                Resource: '*'
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                - ecr:DescribeImageScanFindings
                - ecr:GetLifecyclePolicyPreview
                - ecr:GetDownloadUrlForLayer
                - ecr:DescribeImageReplicationStatus
                - ecr:ListTagsForResource
                - ecr:ListImages
                - ecr:BatchGetRepositoryScanningConfiguration
                - ecr:UntagResource
                - ecr:BatchGetImage
                - ecr:DescribeImages
                - ecr:TagResource
                - ecr:DescribeRepositories
                - ecr:BatchCheckLayerAvailability
                - ecr:GetRepositoryPolicy
                - ecr:GetLifecyclePolicy
                Resource:
                  Fn::Sub: arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/application-repo
              - Sid: VisualEditor1
                Effect: Allow
                Action:
                - ecr:GetRegistryPolicy
                - ecr:DescribeRegistry
                - ecr:DescribePullThroughCacheRules
                - ecr:GetAuthorizationToken
                - ecr:GetRegistryScanningConfiguration
                Resource: '*'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Policy11'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref ResourceNamePrefix
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: ApplicationRole
          Value: !Sub '${ApplicationID}-ROLE'
        - Key: Compliance
          Value: !Ref Compliance
        - Key: InfoClassification
          Value: !Ref InfoClassification

  DataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-DataFunction
      ImageUri: 066167586502.dkr.ecr.us-east-1.amazonaws.com/application-repo:latest
      PackageType: Image
      Role: !GetAtt LambdaRole.Arn
      AutoPublishAlias: latest
      MemorySize: 10240
      Timeout: 900
      Description: lambda function used to extract data from CSV file and update database.
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              !Ref CommonSGExportName      
        SubnetIds: !FindInMap [Environments, !Ref EnvironmentName, Subnets]
