AWSTemplateFormatVersion: 2010-09-09
Description: This Template Creates Lambda functions for the new Notification microservice.
Parameters:
  BucketName:
    Type: String
    Description: Enter the S3 bucket name where the lambda code is stored.
    Default: staging-lambda-function
  BucketKey:
    Type: String
    Description: Enter the S3 object path of the code.
    Default: WebSocket/NDS-CYNC-STAGNG-WEBSOCKET-LambdaFunction.zip
  Timeout:
    Type: String
    Description: Enter the lambda function timeout in seconds.
    Default: '300'
    AllowedPattern: '^[0-9]{1,3}'
  AuthorizerHandler:
    Type: String
    Description: Specify Handler for the Authorizer lambda function
    Default: index.handler
  AuthorizerUrl:
    Type: String
    Default: 'https://staging.cyncsoftware.com/'
    Description: Prefix for the AuthorizerUrl
  ResourceNamePrefix:
    Type: String
    Default: NDS-CYNC
    Description: Prefix for the name of the resource
  Runtime:
    Type: String
    Description: Lambda Runtime version.
    Default: nodejs16.x
    AllowedValues:
      - ruby2.7
      - python3.8
      - python3.9
      - java8
      - python3.6
      - nodejs16.x
      - java11
  Project:
    Type: String
    Description: Enter a value for tag Project
    Default: NDS-CYNC
  CidrIp:
    Type: String
    Default: 0.0.0.0/0
    Description: Enter the VPC CIDR range of the VPC where the lambda is deployed.
  LambdaMemory:
    Type: String
    Description: Specify the Memory size required for lambda function to run.
    Default: '128'
    AllowedValues:
      - '128'
      - '192'
      - '256'
      - '320'
      - '384'
      - '448'
      - '512'
      - '576'
      - '640'
      - '704'
      - '768'
      - '832'
      - '896'
      - '960'
      - '1024'
      - '1088'
      - '1152'
      - '1216'
      - '1280'
      - '1344'
      - '1408'
      - '1472'
      - '1536'
      - '2000'
  AppHandler:
    Type: String
    Description: Enter the lambda handler name
    Default: websocket.handler
  Compliance:
    Type: String
    Description: Enter a value for tag Compliance
    Default: SOC2
  InfoClassification:
    Type: String
    Description: Enter a value for tag InfoClassification
    Default: Internal
  EnvironmentName:
    Type: String
    Default: STAGING
    AllowedValues:
      - DEV
      - DEV2
      - STAGING
      - PRESTAGING
      - PRODSUPPORT
      - UAT
      - PROD
    Description: Choose the environment where the service is being deployed.
  SubnetId:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: 'subnet-b7bf529b,subnet-c4bb6f99'
    Description: Select the subnet ids where the lambda function will be deployed.
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Default: vpc-9c151dfa
    Description: Select the VPC id where the lambda function will be deployed.
  Owner:
    Type: String
    Default: NDS
    Description: Enter a value for tag Owner
  ApplicationID:
    Type: String
    Default: NOTIFICATION
    Description: Enter a value for tag ApplicationID
  ServiceName:
    Type: String
    Default: WEBSOCKET
    Description: Enter the service name of the current stack.
  APIStageName:
    Type: String
    Default: Stage
    Description: Enter the api gateway stage name where the api will be deployed.
  CodeBucket:
    Type: String
    Description: S3 bucket name where lambda code is stored.
    Default: staging-lambda-function
  CodeKey:
    Type: String
    Description: S3 bucket path where lambda deployment package code is stored.
    Default: WebSocket/NDS-CYNC-WEB-SOCKET-Authorizer.zip
  ENVLAMBDAenvName:
    Type: String
    Description: Enter the value for lambda environment variable envName.
    Default: staging
Mappings:
  Environments:
    DEV:
      RetentionInDays: 7
    DEV2:
      RetentionInDays: 7
    STAGING:
      RetentionInDays: 30
    PRESTAGING:
      RetentionInDays: 30
    UAT:
      RetentionInDays: 731
    PROD:
      RetentionInDays: 731    
Resources:
      
      
  WebSocketDBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: This Secret is using for Notification Service
      Name: !Sub '${Project}-${EnvironmentName}-${ServiceName}-Secret'
      Tags:
        - Key: Name
          Value: !Sub '${Project}-${EnvironmentName}-${ServiceName}-Secret'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: ApplicationRole
          Value: !Sub '${ApplicationID}-${ServiceName}-SCRT'
        - Key: Compliance
          Value: !Ref Compliance
        - Key: InfoClassification
          Value: !Ref InfoClassification

  AuthorizerInvokeLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Project}-${EnvironmentName}-${ServiceName}-Invoke-LambdaRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Tags:
        - Key: Name
          Value: !Sub '${Project}-${EnvironmentName}-${ServiceName}-InvokeLambdaRole'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: ApplicationRole
          Value: !Sub '${ApplicationID}-${ServiceName}-ROLE'
        - Key: Compliance
          Value: !Ref Compliance
        - Key: InfoClassification
          Value: !Ref InfoClassification
      Path: /
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                 - !GetAtt AuthorizerLambda.Arn
          PolicyName: !Sub '${Project}-${EnvironmentName}-${ServiceName}-Lambda-Invoke-Policy'
  
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allows local vpc traffic
      GroupName: !Sub '${Project}-${EnvironmentName}-${ServiceName}-SecurityGroup'
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: !Ref CidrIp
      Tags:
        - Key: Name
          Value: !Sub '${Project}-${EnvironmentName}-${ServiceName}-SecurityGroup'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: ApplicationRole
          Value: !Sub '${ApplicationID}-${ServiceName}-SG'
        - Key: Compliance
          Value: !Ref Compliance
        - Key: InfoClassification
          Value: !Ref InfoClassification

  AuthorizerLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Lambda-Role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ec2permission
                Effect: Allow
                Action:
                  - 'ec2:DescribeDhcpOptions'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeVpcs'
                Resource: '*'
              - Action:
                  - 'ec2:CreateNetworkInterface'
                Resource:
                  - !Sub >-
                    arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${SecurityGroup}
                  - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*'
                  - !Sub >-
                    arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
                Effect: Allow
              - Action:
                  - 'ec2:CreateNetworkInterfacePermission'
                Resource:
                  - !Sub >-
                    arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
                Effect: Allow
              - Sid: Logstreaming
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:TagLogGroup'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Lambda
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Lambda:*
          PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Policy'
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Policy'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref ResourceNamePrefix
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: ApplicationRole
          Value: !Sub '${ApplicationID}-ROLE'
        - Key: Compliance
          Value: !Ref Compliance
        - Key: InfoClassification
          Value: !Ref InfoClassification

  CWLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Logs'
      RetentionInDays: !FindInMap [Environments, !Ref EnvironmentName, RetentionInDays]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Logs'
        - Key: ApplicationRole
          Value: !Sub ${ApplicationID}-LG
        - Key: InfoClassification
          Value: !Ref InfoClassification
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
          
  AuthorizerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt AuthorizerLambdaRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Ref CodeKey
      FunctionName: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Lambda'
      Runtime: !Ref Runtime
      Timeout: !Ref Timeout
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SecurityGroup.GroupId
        SubnetIds: !Ref SubnetId
      Handler: !Ref AuthorizerHandler
      MemorySize: !Ref LambdaMemory
      Environment:
        Variables:
          authUrl: !Ref AuthorizerUrl
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Lambda'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref ResourceNamePrefix
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: ApplicationRole
          Value: !Sub '${ApplicationID}-FUNC'
        - Key: Compliance
          Value: !Ref Compliance
        - Key: InfoClassification
          Value: !Ref InfoClassification