AWSTemplateFormatVersion: 2010-09-09
Description: This Template Creates Lambda functions for the new Notification microservice.
Parameters:
  WebSocketAPI:
    Type: String
    Default: ''
    Description: Enter the Websocket-authorizer API gatway URL
  Project:
    Type: String
    Description: Enter a value for tag Project
    Default: NDS-CYNC
  EnvironmentName:
    Type: String
    Default: STAGING
    AllowedValues:
      - POC
      - DEV
      - DEV2
      - STAGING
      - PRESTAGING
      - PRODSUPPORT
      - UAT
      - PROD
    Description: Choose the environment where the service is being deployed.
  ServiceName:
    Type: String
    Default: WEBSOCKET-Notification
    Description: Enter the service name of the current stack.
  Owner:
    Type: String
    Default: NDS
    Description: Enter a value for tag Owner
  ApplicationID:
    Type: String
    Default: NOTIFICATION
    Description: Enter a value for tag ApplicationID
  InfoClassification:
    Type: String
    Description: Enter a value for tag InfoClassification
    Default: Internal
  Compliance:
    Type: String
    Description: Enter a value for tag Compliance
    Default: SOC2
  APIStageName:
    Type: String
    Default: Stage
    Description: Enter the api gateway stage name where the api will be deployed.
  BucketName:
    Type: String
    Description: Enter the S3 bucket name where the lambda code is stored.
    Default: staging-lambda-function
  BucketKey:
    Type: String
    Description: Enter the S3 object path of the code.
    Default: WebSocket/NDS-CYNC-STAGNG-WEBSOCKET-LambdaFunction.zip
  Runtime:
    Type: String
    Description: Lambda Runtime version.
    Default: nodejs16.x
    AllowedValues:
      - ruby2.7
      - python3.8
      - python3.9
      - java8
      - python3.6
      - nodejs16.x
      - java11
  Timeout:
    Type: String
    Description: Enter the lambda function timeout in seconds.
    Default: '300'
    AllowedPattern: '^[0-9]{1,3}'
  AppHandler:
    Type: String
    Description: Enter the lambda handler name
    Default: websocket.handler
  LambdaMemory:
    Type: String
    Description: Specify the Memory size required for lambda function to run.
    Default: '128'
    AllowedValues:
      - '128'
      - '192'
      - '256'
      - '320'
      - '384'
      - '448'
      - '512'
      - '576'
      - '640'
      - '704'
      - '768'
      - '832'
      - '896'
      - '960'
      - '1024'
      - '1088'
      - '1152'
      - '1216'
      - '1280'
      - '1344'
      - '1408'
      - '1472'
      - '1536'
      - '2000'
  ENVLAMBDAenvName:
    Type: String
    Description: Enter the value for lambda environment variable envName.
    Default: staging
  WebSocketDBSecretARN:
    Type: String
    Description: Enter the Arn of Web Socket DB Secret
    Default: arn:..
  SecurityGroupId:
    Type: String
    Description: Specify the Common Security group ID
    Default: SecuritygroupID
  AuthorizerLambdaArn:
    Type: String
    Description: Enter the AuthorizerLambda ARN
    Default: ''
  APIStageName:
    Type: String
    Default: Stage
    Description: Enter the api gateway stage name where the api will be deployed.

Mappings:
  Environments:
    POC:
      RetentionInDays: 7
      Subnets:
        - subnet-00578498d20bcfd71
        - subnet-0517c1dbe19aaa70e
    DEV:
      RetentionInDays: 7
      Subnets: 
        - subnet-5d910c71
        - subnet-4265a87d
        - subnet-5f085905
      VpcId: vpc-70d8bd09
    DEV2:
      Subnets: 
        - subnet-5d910c71
        - subnet-4265a87d
        - subnet-5f085905
      VpcId: vpc-70d8bd09
      RetentionInDays: 7
    STAGING:
      Subnets:
        - subnet-b7bf529b
        - subnet-cd72ae85
        - subnet-c4bb6f99
      VpcId: vpc-9c151dfa
      RetentionInDays: 30
    PRESTAGING:
      Subnets:
        - subnet-b7bf529b
        - subnet-cd72ae85
        - subnet-c4bb6f99
      VpcId: vpc-9c151dfa
      RetentionInDays: 30
    UAT:
      Subnets:
        - subnet-0f2d3cb9a4a7d1d44
        - subnet-00a46aaef3ee378fa
        - subnet-09d856d1ef81ed834
      VpcId: vpc-02123994114f1a98d
      RetentionInDays: 731
    PROD:
      Subnets:
        - subnet-15515b4f
        - subnet-61b51b5c
        - subnet-a2d424d4
      VpcId: vpc-b53bfadf
      RetentionInDays: 731 

Resources:
  WebSocketAPI:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub '${Project}-${EnvironmentName}-WebSocket-API'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  WebSocketApiAuthorizer:
    Type: 'AWS::ApiGatewayV2::Authorizer'
    Properties:
      ApiId: !Ref WebSocketAPI
      AuthorizerCredentialsArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AuthorizerInvokeLambdaRole}'
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub >-
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AuthorizerLambda}/invocations
      IdentitySource:
        - route.request.querystring.authorization
      Name: !Sub '${Project}-${EnvironmentName}-${ServiceName}-LambdaAuthorizer'

  ConnectRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebSocketApiAuthorizer
      Target: !Sub 'integrations/${MyIntegration}'

  DisconnectRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${MyIntegration}'

  DefaultRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Sub 'integrations/${MyIntegration}'

  MyIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref WebSocketAPI
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotificationLambda.Arn}/invocations'
      IntegrationMethod: POST

  WebSocketDeployment:
    Type: 'AWS::ApiGatewayV2::Deployment'
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - DefaultRoute
    Properties:
      ApiId: !Ref WebSocketAPI

  APIStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: !Ref APIStageName
      ApiId: !Ref WebSocketAPI
      DeploymentId: !Ref WebSocketDeployment
      AccessLogSettings: 
         DestinationArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CWLogGroup}:*'
         Format: >-
           {"requestId":"$context.requestId", "ip": "$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","eventType":"$context.eventType","routeKey":"$context.routeKey","status":"$context.status","connectionId":"$context.connectionId"}
      DefaultRouteSettings:
        LoggingLevel: INFO

  MyRouteResponse:
    Type: 'AWS::ApiGatewayV2::RouteResponse'
    Properties:
      RouteId: !Ref ConnectRoute
      ApiId: !Ref WebSocketAPI
      RouteResponseKey: $default

  CWLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Logs'
      RetentionInDays: !FindInMap [Environments, !Ref EnvironmentName, RetentionInDays]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Logs'
        - Key: ApplicationRole
          Value: !Sub ${ApplicationID}-LG
        - Key: InfoClassification
          Value: !Ref InfoClassification
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Compliance
          Value: !Ref Compliance
          
  AuthorizerInvokeLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Project}-${EnvironmentName}-${ServiceName}-Invoke-LambdaRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Tags:
        - Key: Name
          Value: !Sub '${Project}-${EnvironmentName}-${ServiceName}-InvokeLambdaRole'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: ApplicationRole
          Value: !Sub '${ApplicationID}-${ServiceName}-ROLE'
        - Key: Compliance
          Value: !Ref Compliance
        - Key: InfoClassification
          Value: !Ref InfoClassification
      Path: /
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                 - !GetAtt AuthorizerLambda.Arn
          PolicyName: !Sub '${Project}-${EnvironmentName}-${ServiceName}-Lambda-Invoke-Policy'

  NotificationLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Project}-${EnvironmentName}-${ServiceName}-LambdaRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Tags:
        - Key: Name
          Value: !Sub '${Project}-${EnvironmentName}-${ServiceName}-LambdaRole'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: ApplicationRole
          Value: !Sub '${ApplicationID}-${ServiceName}-ROLE'
        - Key: Compliance
          Value: !Ref Compliance
        - Key: InfoClassification
          Value: !Ref InfoClassification
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutRetentionPolicy'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Project}-${EnvironmentName}-${ServiceName}-LambdaFunction
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Project}-${EnvironmentName}-${ServiceName}-LambdaFunction:*
              - Effect: Allow
                Action:
                  - 'secretsmanager:ListSecrets'
                Resource: '*'
                Sid: 'SecretsListAccess'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref 'WebSocketDBSecretARN'
                Sid: 'SecretsGetAccess'
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketName}'
                  - !Sub 'arn:aws:s3:::${BucketName}/*'
              - Effect: Allow
                Action:
                  - 'execute-api:ManageConnections'
                Resource:   
                   - !Sub >-
                      arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/${APIStageName}/*/*
          PolicyName: !Sub '${Project}-${EnvironmentName}-${ServiceName}-Lambda-Policy'

  NotificationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt 
        - NotificationLambdaRole
        - Arn
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref BucketKey
      FunctionName: !Sub '${Project}-${EnvironmentName}-${ServiceName}-LambdaFunction'
      Runtime: !Ref Runtime
      Timeout: !Ref Timeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: 
          - !FindInMap [Environments, !Ref EnvironmentName, Subnets]
      Handler: !Ref AppHandler
      MemorySize: !Ref LambdaMemory
      Environment:
        Variables:
          configSecretId: !Ref WebSocketDBSecretARN
          envName: !Ref ENVLAMBDAenvName
      Tags:
        - Key: Name
          Value: !Sub '${Project}-${EnvironmentName}-${ServiceName}-LambdaFunction'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: ApplicationRole
          Value: !Sub '${ApplicationID}-${ServiceName}-FUNC'
        - Key: Compliance
          Value: !Ref Compliance
        - Key: InfoClassification
          Value: !Ref InfoClassification

  LambdaConnectInvoke:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !GetAtt NotificationLambda.Arn
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/$connect'

  LambdaDisConnectInvoke:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !GetAtt NotificationLambda.Arn
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/$disconnect'

  LambdaDefaultInvoke:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !GetAtt NotificationLambda.Arn
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/$default' 