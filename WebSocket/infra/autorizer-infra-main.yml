Transform: AWS::Serverless-2016-10-31
Description: This Template Creates WebSocket API and Lambda functions.
Parameters: 
  ResourceNamePrefix:
    Type: String
    Default: NDS-CYNC
    Description: Prefix for the name of the resource
  S3BucketName:
    Type: String
    Description: Specify S3 bucket name to store the templates.
    Default: nds-cync-prod-..
  Project:
    Type: String
    Description: Enter a value for tag Project
    Default: NDS-CYNC
  EnvironmentName:
    Type: String
    Default: POC
    AllowedValues:
      - POC
      - DEV
      - DEV2
      - STAGING
      - PRESTAGING
      - PRODSUPPORT
      - UAT
      - PROD
    Description: Choose the environment where the service is being deployed.
  ServiceName:
    Type: String
    Default: WEBSOCKET
    Description: Enter the service name of the current stack.
  Owner:
    Type: String
    Default: NDS
    Description: Enter a value for tag Owner
  ApplicationID:
    Type: String
    Default: WEBSOCKET-Authorizer
    Description: Enter a value for tag ApplicationID
  InfoClassification:
    Type: String
    Description: Enter a value for tag InfoClassification
    Default: Internal
  Compliance:
    Type: String
    Description: Enter a value for tag Compliance
    Default: SOC2
  AuthorizerUrl:
    Type: String
    Default: 'https://staging.cyncsoftware.com/'
    Description: Prefix for the AuthorizerUrl
  AuthorizerHandler:
    Type: String
    Description: Specify Handler for the Authorizer lambda function
    Default: index.handler
  LambdaMemory:
    Type: String
    Description: Specify the Memory size required for lambda function to run.
    Default: '128'
    AllowedValues:
      - '128'
      - '192'
      - '256'
      - '320'
      - '384'
      - '448'
      - '512'
      - '576'
      - '640'
      - '704'
      - '768'
      - '832'
      - '896'
      - '960'
      - '1024'
      - '1088'
      - '1152'
      - '1216'
      - '1280'
      - '1344'
      - '1408'
      - '1472'
      - '1536'
      - '2000'
  Timeout:
    Type: String
    Description: Enter the lambda function timeout in seconds.
    Default: '300'
    AllowedPattern: '^[0-9]{1,3}'
  Runtime:
    Type: String
    Description: Lambda Runtime version.
    Default: nodejs16.x
    AllowedValues:
      - ruby2.7
      - python3.8
      - python3.9
      - java8
      - python3.6
      - nodejs16.x
      - java11
  SecurityGroupId:
    Type: String
    Description: Specify the Common Security group ID
    Default: SeuritygroupID

Mappings:
  Environments:
    POC:
      RetentionInDays: 7
      Subnets:
        - subnet-00578498d20bcfd71
        - subnet-0517c1dbe19aaa70e
    DEV:
      RetentionInDays: 7
      Subnets: 
        - subnet-5d910c71
        - subnet-4265a87d
        - subnet-5f085905
    DEV2:
      Subnets: 
        - subnet-5d910c71
        - subnet-4265a87d
        - subnet-5f085905
      RetentionInDays: 7
    STAGING:
      Subnets:
        - subnet-b7bf529b
        - subnet-cd72ae85
        - subnet-c4bb6f99
      RetentionInDays: 30
    PRESTAGING:
      Subnets:
        - subnet-b7bf529b
        - subnet-cd72ae85
        - subnet-c4bb6f99
      RetentionInDays: 30
    UAT:
      Subnets:
        - subnet-0f2d3cb9a4a7d1d44
        - subnet-00a46aaef3ee378fa
        - subnet-09d856d1ef81ed834
      RetentionInDays: 731
    PROD:
      Subnets:
        - subnet-15515b4f
        - subnet-61b51b5c
        - subnet-a2d424d4
      RetentionInDays: 731    
  
Resources:
  AuthorizerLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Lambda-Role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ec2permission
                Effect: Allow
                Action:
                  - 'ec2:DescribeDhcpOptions'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeVpcs'
                Resource: '*'
              - Action:
                  - 'ec2:CreateNetworkInterface'
                Resource:
                  - !Sub >-
                    arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${SecurityGroupId}
                  - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*'
                  - !Sub >-
                    arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
                Effect: Allow
              - Action:
                  - 'ec2:CreateNetworkInterfacePermission'
                Resource:
                  - !Sub >-
                    arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
                Effect: Allow
              - Sid: Logstreaming
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:TagLogGroup'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Lambda
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Lambda:*
          PolicyName: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Policy'
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Policy'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref ResourceNamePrefix
        - Key: ApplicationID
          Value: !Ref ApplicationID
        - Key: ApplicationRole
          Value: !Sub '${ApplicationID}-ROLE'
        - Key: Compliance
          Value: !Ref Compliance
        - Key: InfoClassification
          Value: !Ref InfoClassification

  AuthorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./WebSocket/WebSocket-Authorizer-Code/Code
      Description: This Lambda function creates Authorizer lambda.
      FunctionName:
        Fn::Sub: '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Lambda'
      Handler:
        Ref: AuthorizerHandler
      MemorySize:
        Ref: LambdaMemory
      Role:
        Fn::GetAtt:
        - AuthorizerLambdaRole
        - Arn
      Runtime:
        Ref: Runtime
      Timeout:
        Ref: Timeout
      Environment:
        Variables:
          authUrl: !Ref AuthorizerUrl
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !FindInMap [Environments, !Ref EnvironmentName, Subnets]
      Tags:
        Name:
          Fn::Sub: '${ResourceNamePrefix}-${EnvironmentName}-${ServiceName}-Authorizer-Lambda'
        ApplicationRole:
          Fn::Sub: ${ApplicationID}-FUNC
        Environment:
          Ref: Environment
        ApplicationID:
          Ref: ApplicationID
        Project:
          Ref: Project
        Owner:
          Ref: Owner
        InfoClassification:
          Ref: InfoClassification
        Compliance:
          Ref: !Ref Compliance

