Transform: AWS::Serverless-2016-10-31
Description: This template create a Tech Capital reports Lambda function, S3 bucket and S3 Event.
Parameters:
  ParameterStoreEnv:
    Type: String
    Description: Specify the name of the Parameterstore
    Default: parameter-store-file-name
  S3BucketName:
    Type: String
    Description: Specify S3 bucket name to store the reports.
    Default: nds-cync-prod-tech-capital-reports
  Timeout:
    Type: String
    Description: Specify Lambda function timeout in seconds.
    Default: '60'
    AllowedPattern: ^[0-9]{1,3}
  ResourceNamePrefix:
    Default: NDS-CYNC
    Type: String
    Description: Enter a value that will be prefixed to the AWS resources created through this stack.
    AllowedValues:
    - NDS-CYNC
  Environment:
    Type: String
    Description: Select a value in which environment the AWS resources needs to be provisioned.
    Default: DEV
    AllowedValues:
    - POC
    - DEV
    - DEV2
    - STAGING
    - PRESTAGING
    - UAT
    - PROD
  UseVPC:
    Type: String
    Description: Select the value so that VPC associate with Lambda or not.
    AllowedValues:
      - true
      - false
  Project:
    Type: String
    Description: Enter the value for tag Project.
    AllowedValues:
    - NDS-CYNC
  Owner:
    Type: String
    Description: Enter the value for tag Owner.
    AllowedValues:
    - NDS
  Runtime:
    Type: String
    Description: Lambda Runtime version.
    Default: nodejs16.x
    AllowedValues:
	    - ruby2.7
      - python3.8
      - python3.9
      - python3.10
      - nodejs16.x
      - nodejs18.x
  LambdaMemory:
    Type: String
    Description: Memory size required for lambda function to run.
    Default: '128'
    AllowedValues:
    - '128'
    - '192'
    - '256'
    - '320'
    - '384'
    - '448'
    - '512'
    - '576'
    - '640'
    - '704'
    - '768'
    - '832'
    - '896'
    - '960'
    - '1024'
    - '1088'
    - '1152'
    - '1216'
    - '1280'
    - '1344'
    - '1408'
    - '1472'
    - '1536'
    - '2048'
  HandlerName:
    Type: String
    Description: Specify handler string based on your lambda function file name.
    Default: index.handler
  ServiceName:
    Type: String
    Description: Enter the microservice name/application name this will be appended for resource names.
    Default: Cync-Tech-DW
  ApplicationID:
    Type: String
    ConstraintDescription: ID of the microservice name/application name being deployed.
    Default: Cync-Tech-DW
  IngressRules:
    Type: CommaDelimitedList
    Description: Specify the rule information in following format "IpProtocol:FromPort:ToPort:SourceSecurityGroupId|CidrIp"
      (ex. 6:8080:8080:sg-04cb6722844514c11)
    Default: N:N:N:N,N:N:N:N,N:N:N:N,N:N:N:N,N:N:N:N,N:N:N:N,N:N:N:N,N:N:N:N,N:N:N:N,N:N:N:N
  EgressRules:
    Type: CommaDelimitedList
    Description: Specify the rule information in following format "IpProtocol:FromPort:ToPort:SourceSecurityGroupId|CidrIp"
      (ex. 6:8080:8080:sg-04cb6722844514c11)
    Default: N:N:N:N,N:N:N:N,N:N:N:N,N:N:N:N,N:N:N:N
  InfoClassification:
    Type: String
    Default: Internal
    Description: Enter the value for tag InfoClassification
    AllowedValues:
    - Internal
    - Public
    - Restricted
    - Confidential
  Compliance:
    Type: String
    Default: SOC2
    Description: Enter the value for tag Compliance
    AllowedValues:
    - SOC2
  S3FolderNames:
    Type: CommaDelimitedList
    Description: Enter the Lender names to be added to S3 configurations
    Default: NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE
  S3ObjectExpInDays:
    Type: String
    Description: Enter the objects expiry date in the S3 bucket
    Default: '30'
Mappings:
  Environments:
    POC:
      Subnets:
        - subnet-00578498d20bcfd71
        - subnet-0517c1dbe19aaa70e
      VpcId: vpc-045a4913e9fee88d1
    DEV2:
      Subnets:
      - subnet-5d910c71
      - subnet-f54db7be
      - subnet-5f085905
      VpcId: vpc-70d8bd09
    DEV:
      Subnets:
      - subnet-5d910c71
      - subnet-f54db7be
      - subnet-5f085905
      VpcId: vpc-70d8bd09
    STAGING:
      Subnets:
      - subnet-b7bf529b
      - subnet-cd72ae85
      - subnet-c4bb6f99
      VpcId: vpc-9c151dfa
    PRESTAGING:
      Subnets:
      - subnet-b7bf529b
      - subnet-cd72ae85
      - subnet-c4bb6f99
      VpcId: vpc-9c151dfa
    UAT:
      Subnets:
      - subnet-0f2d3cb9a4a7d1d44
      - subnet-00a46aaef3ee378fa
      VpcId: vpc-02123994114f1a98d
    PROD:
      Subnets:
      - subnet-11ff891e
      - subnet-a900be87
      - subnet-4b95272c
      VpcId: vpc-b53bfadf
Conditions:
  VPCAssociation: !Equals 
    - !Ref UseVPC
    - 'true'
  Ingress0Exist:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Ref: IngressRules
    - N:N:N:N
  SgFoundIn0:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 0
              - Ref: IngressRules
    - sg
  Ingress1Exist:
    Fn::Equals:
    - Fn::Select:
      - 1
      - Ref: IngressRules
    - N:N:N:N
  SgFoundIn1:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 1
              - Ref: IngressRules
    - sg
  Ingress2Exist:
    Fn::Equals:
    - Fn::Select:
      - 2
      - Ref: IngressRules
    - N:N:N:N
  SgFoundIn2:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 2
              - Ref: IngressRules
    - sg
  Ingress3Exist:
    Fn::Equals:
    - Fn::Select:
      - 3
      - Ref: IngressRules
    - N:N:N:N
  SgFoundIn3:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 3
              - Ref: IngressRules
    - sg
  Ingress4Exist:
    Fn::Equals:
    - Fn::Select:
      - 4
      - Ref: IngressRules
    - N:N:N:N
  SgFoundIn4:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 4
              - Ref: IngressRules
    - sg
  Ingress5Exist:
    Fn::Equals:
    - Fn::Select:
      - 5
      - Ref: IngressRules
    - N:N:N:N
  SgFoundIn5:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 5
              - Ref: IngressRules
    - sg
  Ingress6Exist:
    Fn::Equals:
    - Fn::Select:
      - 6
      - Ref: IngressRules
    - N:N:N:N
  SgFoundIn6:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 6
              - Ref: IngressRules
    - sg
  Ingress7Exist:
    Fn::Equals:
    - Fn::Select:
      - 7
      - Ref: IngressRules
    - N:N:N:N
  SgFoundIn7:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 7
              - Ref: IngressRules
    - sg
  Ingress8Exist:
    Fn::Equals:
    - Fn::Select:
      - 8
      - Ref: IngressRules
    - N:N:N:N
  SgFoundIn8:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 8
              - Ref: IngressRules
    - sg
  Ingress9Exist:
    Fn::Equals:
    - Fn::Select:
      - 9
      - Ref: IngressRules
    - N:N:N:N
  SgFoundIn9:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 9
              - Ref: IngressRules
    - sg
  Egress0Exist:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Ref: EgressRules
    - N:N:N:N
  EgressSgFoundIn0:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 0
              - Ref: EgressRules
    - sg
  Egress1Exist:
    Fn::Equals:
    - Fn::Select:
      - 1
      - Ref: EgressRules
    - N:N:N:N
  EgressSgFoundIn1:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 1
              - Ref: EgressRules
    - sg
  Egress2Exist:
    Fn::Equals:
    - Fn::Select:
      - 2
      - Ref: EgressRules
    - N:N:N:N
  EgressSgFoundIn2:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 2
              - Ref: EgressRules
    - sg
  Egress3Exist:
    Fn::Equals:
    - Fn::Select:
      - 3
      - Ref: EgressRules
    - N:N:N:N
  EgressSgFoundIn3:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 3
              - Ref: EgressRules
    - sg
  Egress4Exist:
    Fn::Equals:
    - Fn::Select:
      - 4
      - Ref: EgressRules
    - N:N:N:N
  EgressSgFoundIn4:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Fn::Split:
        - '-'
        - Fn::Select:
          - 3
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 4
              - Ref: EgressRules
    - sg
  S3RuleOne:
    Fn::Equals:
    - Fn::Select:
      - 0
      - Ref: S3FolderNames
    - NONE
  S3RuleTwo:
    Fn::Equals:
    - Fn::Select:
      - 1
      - Ref: S3FolderNames
    - NONE
  S3RuleThree:
    Fn::Equals:
    - Fn::Select:
      - 2
      - Ref: S3FolderNames
    - NONE
  S3RuleFour:
    Fn::Equals:
    - Fn::Select:
      - 3
      - Ref: S3FolderNames
    - NONE
  S3RuleFive:
    Fn::Equals:
    - Fn::Select:
      - 4
      - Ref: S3FolderNames
    - NONE
  S3RuleSix:
    Fn::Equals:
    - Fn::Select:
      - 5
      - Ref: S3FolderNames
    - NONE
  S3RuleSeven:
    Fn::Equals:
    - Fn::Select:
      - 6
      - Ref: S3FolderNames
    - NONE
  S3RuleEight:
    Fn::Equals:
    - Fn::Select:
      - 7
      - Ref: S3FolderNames
    - NONE
  S3RuleNine:
    Fn::Equals:
    - Fn::Select:
      - 8
      - Ref: S3FolderNames
    - NONE
  S3RuleTen:
    Fn::Equals:
    - Fn::Select:
      - 9
      - Ref: S3FolderNames
    - NONE
Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: VPCAssociation
    Properties:
      GroupName:
        Fn::Sub: ${ResourceNamePrefix}-${Environment}-${ServiceName}-SG
      GroupDescription: Allows local vpc traffic
      VpcId:
        Fn::FindInMap:
        - Environments
        - Ref: Environment
        - VpcId
      SecurityGroupIngress:
      - Fn::If:
        - Ingress0Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 0
                - Ref: IngressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 0
                - Ref: IngressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 0
                - Ref: IngressRules
          SourceSecurityGroupId:
            Fn::If:
            - SgFoundIn0
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 0
                  - Ref: IngressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - SgFoundIn0
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 0
                  - Ref: IngressRules
      - Fn::If:
        - Ingress1Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 1
                - Ref: IngressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 1
                - Ref: IngressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 1
                - Ref: IngressRules
          SourceSecurityGroupId:
            Fn::If:
            - SgFoundIn1
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 1
                  - Ref: IngressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - SgFoundIn1
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 1
                  - Ref: IngressRules
      - Fn::If:
        - Ingress2Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 2
                - Ref: IngressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 2
                - Ref: IngressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 2
                - Ref: IngressRules
          SourceSecurityGroupId:
            Fn::If:
            - SgFoundIn2
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 2
                  - Ref: IngressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - SgFoundIn2
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 2
                  - Ref: IngressRules
      - Fn::If:
        - Ingress3Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 3
                - Ref: IngressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 3
                - Ref: IngressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 3
                - Ref: IngressRules
          SourceSecurityGroupId:
            Fn::If:
            - SgFoundIn3
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 3
                  - Ref: IngressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - SgFoundIn3
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 3
                  - Ref: IngressRules
      - Fn::If:
        - Ingress4Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 4
                - Ref: IngressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 4
                - Ref: IngressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 4
                - Ref: IngressRules
          SourceSecurityGroupId:
            Fn::If:
            - SgFoundIn4
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 4
                  - Ref: IngressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - SgFoundIn4
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 4
                  - Ref: IngressRules
      - Fn::If:
        - Ingress5Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 5
                - Ref: IngressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 5
                - Ref: IngressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 5
                - Ref: IngressRules
          SourceSecurityGroupId:
            Fn::If:
            - SgFoundIn5
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 5
                  - Ref: IngressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - SgFoundIn5
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 5
                  - Ref: IngressRules
      - Fn::If:
        - Ingress6Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 6
                - Ref: IngressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 6
                - Ref: IngressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 6
                - Ref: IngressRules
          SourceSecurityGroupId:
            Fn::If:
            - SgFoundIn6
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 6
                  - Ref: IngressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - SgFoundIn6
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 6
                  - Ref: IngressRules
      - Fn::If:
        - Ingress7Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 7
                - Ref: IngressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 7
                - Ref: IngressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 7
                - Ref: IngressRules
          SourceSecurityGroupId:
            Fn::If:
            - SgFoundIn7
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 7
                  - Ref: IngressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - SgFoundIn7
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 7
                  - Ref: IngressRules
      - Fn::If:
        - Ingress8Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 8
                - Ref: IngressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 8
                - Ref: IngressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 8
                - Ref: IngressRules
          SourceSecurityGroupId:
            Fn::If:
            - SgFoundIn8
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 8
                  - Ref: IngressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - SgFoundIn8
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 8
                  - Ref: IngressRules
      - Fn::If:
        - Ingress9Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 9
                - Ref: IngressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 9
                - Ref: IngressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 9
                - Ref: IngressRules
          SourceSecurityGroupId:
            Fn::If:
            - SgFoundIn9
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 9
                  - Ref: IngressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - SgFoundIn9
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 9
                  - Ref: IngressRules
      SecurityGroupEgress:
      - Fn::If:
        - Egress0Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 0
                - Ref: EgressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 0
                - Ref: EgressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 0
                - Ref: EgressRules
          DestinationSecurityGroupId:
            Fn::If:
            - EgressSgFoundIn0
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 0
                  - Ref: EgressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - EgressSgFoundIn0
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 0
                  - Ref: EgressRules
      - Fn::If:
        - Egress1Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 1
                - Ref: EgressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 1
                - Ref: EgressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 1
                - Ref: EgressRules
          DestinationSecurityGroupId:
            Fn::If:
            - EgressSgFoundIn1
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 1
                  - Ref: EgressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - EgressSgFoundIn1
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 1
                  - Ref: EgressRules
      - Fn::If:
        - Egress2Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 2
                - Ref: EgressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 2
                - Ref: EgressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 2
                - Ref: EgressRules
          DestinationSecurityGroupId:
            Fn::If:
            - EgressSgFoundIn2
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 2
                  - Ref: EgressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - EgressSgFoundIn2
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 2
                  - Ref: EgressRules
      - Fn::If:
        - Egress3Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 3
                - Ref: EgressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 3
                - Ref: EgressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 3
                - Ref: EgressRules
          DestinationSecurityGroupId:
            Fn::If:
            - EgressSgFoundIn3
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 3
                  - Ref: EgressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - EgressSgFoundIn3
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 3
                  - Ref: EgressRules
      - Fn::If:
        - Egress4Exist
        - Ref: AWS::NoValue
        - IpProtocol:
            Fn::Select:
            - 0
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 4
                - Ref: EgressRules
          FromPort:
            Fn::Select:
            - 1
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 4
                - Ref: EgressRules
          ToPort:
            Fn::Select:
            - 2
            - Fn::Split:
              - ':'
              - Fn::Select:
                - 4
                - Ref: EgressRules
          DestinationSecurityGroupId:
            Fn::If:
            - EgressSgFoundIn4
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 4
                  - Ref: EgressRules
            - Ref: AWS::NoValue
          CidrIp:
            Fn::If:
            - EgressSgFoundIn4
            - Ref: AWS::NoValue
            - Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Fn::Select:
                  - 4
                  - Ref: EgressRules
      Tags:
      - Key: ApplicationRole
        Value:
          Fn::Sub: ${ApplicationID}-SG
      - Key: Environment
        Value:
          Ref: Environment
      - Key: ApplicationID
        Value:
          Ref: ApplicationID
      - Key: Project
        Value:
          Ref: Project
      - Key: Compliance
        Value:
          Ref: Compliance
      - Key: Owner
        Value:
          Ref: Owner
      - Key: Name
        Value:
          Fn::Sub: ${ResourceNamePrefix}-${Environment}-${ServiceName}-SecurityGroup
      - Key: InfoClassification
        Value:
          Ref: InfoClassification
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${ResourceNamePrefix}-${Environment}-${ServiceName}-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName:
          Fn::Sub: ${ResourceNamePrefix}-${Environment}-${ServiceName}-Policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: CreateLogGroups
            Action:
            - logs:CreateLogGroup
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceNamePrefix}-${Environment}-${ServiceName}-*
            Effect: Allow
          - Sid: CreateLogStreams
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceNamePrefix}-${Environment}-${ServiceName}-*
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceNamePrefix}-${Environment}-${ServiceName}-*:log-stream:*
            Effect: Allow
          - Sid: CWFilterLogEvents
            Effect: Allow
            Action: logs:FilterLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          - Sid: AllowNetworkingPermissions
            Action:
            - ec2:DescribeDhcpOptions
            - ec2:DescribeNetworkInterfaces
            - ec2:DescribeSubnets
            - ec2:DescribeInstances
            - ec2:DescribeImages
            - ec2:DescribeSnapshots
            - ec2:DeleteNetworkInterface
            - ec2:DescribeSecurityGroups
            - ec2:DescribeVpcs
            - ec2:DescribeLaunchTemplates
            - ec2:DescribeLaunchTemplateVersions
            - autoscaling:DescribeAutoScalingGroups
            - autoscaling:DescribeTags
            - autoscaling:DescribeLaunchConfigurations
            Resource: '*'
            Effect: Allow
          - Sid: AllowNetworkingPermissionsTwo
            Action:
            - ec2:CreateNetworkInterface
            Resource:
            - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
            - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*
            - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
            Effect: Allow
          - Sid: S3GetObjectPermission
            Action:
            - s3:GetObject
            Resource:
            - Fn::Sub: arn:aws:s3:::${S3BucketName}
            - Fn::Sub: arn:aws:s3:::${S3BucketName}/*
            Effect: Allow
          - Sid: GetParameterStorePermission
            Action:
            - ssm:GetParameter
            Resource:
            - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
            Effect: Allow
          - Sid: SesAccess
            Effect: Allow
            Action:
            - ses:SendRawEmail
            - ses:ListVerifiedEmailAddresses
            - s3:HeadBucket
            Resource: '*'
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${ResourceNamePrefix}-${Environment}-${ServiceName}-Role
      - Key: Environment
        Value:
          Ref: Environment
      - Key: ApplicationRole
        Value:
          Fn::Sub: ${ApplicationID}-ROLE
      - Key: ApplicationID
        Value:
          Ref: ApplicationID
      - Key: Project
        Value:
          Ref: Project
      - Key: Owner
        Value:
          Ref: Owner
      - Key: InfoClassification
        Value:
          Ref: InfoClassification
      - Key: Compliance
        Value:
          Ref: Compliance
  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./Infra-tech-cap/Lambda-Tech-Capital/code
      Description: This Lambda function sends reports to the users
      FunctionName:
        Fn::Sub: ${ResourceNamePrefix}-${Environment}-${ServiceName}-Lambda
      Handler:
        Ref: HandlerName
      MemorySize:
        Ref: LambdaMemory
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime:
        Ref: Runtime
      Timeout:
        Ref: Timeout
      Environment:
        Variables:
          ParameterName:
            Ref: ParameterStoreEnv
      VpcConfig: !If
        - VPCAssociation
        - SecurityGroupIds:
            - !GetAtt SecurityGroup.GroupId
          SubnetIds:
            !FindInMap [Environments, !Ref Environment, Subnets]
        - !Ref 'AWS::NoValue'
      Tags:
        Name:
          Fn::Sub: ${ResourceNamePrefix}-${Environment}-${ServiceName}-Lambda
        ApplicationRole:
          Fn::Sub: ${ApplicationID}-FUNC
        Environment:
          Ref: Environment
        ApplicationID:
          Ref: ApplicationID
        Project:
          Ref: Project
        Owner:
          Ref: Owner
        InfoClassification:
          Ref: InfoClassification
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: Lambda
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::${S3BucketName}
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'TRUE'
        BlockPublicPolicy: 'TRUE'
        IgnorePublicAcls: 'TRUE'
        RestrictPublicBuckets: 'TRUE'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: DeleteOldObjects
          Status: Enabled
          Prefix: ''
          ExpirationInDays:
            Ref: S3ObjectExpInDays
      BucketName:
        Ref: S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Fn::If:
          - S3RuleOne
          - Ref: AWS::NoValue
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value:
                    Fn::Select:
                    - 0
                    - Ref: S3FolderNames
            Function:
              Fn::GetAtt:
              - Lambda
              - Arn
        - Fn::If:
          - S3RuleTwo
          - Ref: AWS::NoValue
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value:
                    Fn::Select:
                    - 1
                    - Ref: S3FolderNames
            Function:
              Fn::GetAtt:
              - Lambda
              - Arn
        - Fn::If:
          - S3RuleThree
          - Ref: AWS::NoValue
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value:
                    Fn::Select:
                    - 2
                    - Ref: S3FolderNames
            Function:
              Fn::GetAtt:
              - Lambda
              - Arn
        - Fn::If:
          - S3RuleFour
          - Ref: AWS::NoValue
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value:
                    Fn::Select:
                    - 3
                    - Ref: S3FolderNames
            Function:
              Fn::GetAtt:
              - Lambda
              - Arn
        - Fn::If:
          - S3RuleFive
          - Ref: AWS::NoValue
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value:
                    Fn::Select:
                    - 4
                    - Ref: S3FolderNames
            Function:
              Fn::GetAtt:
              - Lambda
              - Arn
        - Fn::If:
          - S3RuleSix
          - Ref: AWS::NoValue
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value:
                    Fn::Select:
                    - 5
                    - Ref: S3FolderNames
            Function:
              Fn::GetAtt:
              - Lambda
              - Arn
        - Fn::If:
          - S3RuleSeven
          - Ref: AWS::NoValue
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value:
                    Fn::Select:
                    - 6
                    - Ref: S3FolderNames
            Function:
              Fn::GetAtt:
              - Lambda
              - Arn
        - Fn::If:
          - S3RuleEight
          - Ref: AWS::NoValue
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value:
                    Fn::Select:
                    - 7
                    - Ref: S3FolderNames
            Function:
              Fn::GetAtt:
              - Lambda
              - Arn
        - Fn::If:
          - S3RuleNine
          - Ref: AWS::NoValue
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value:
                    Fn::Select:
                    - 8
                    - Ref: S3FolderNames
            Function:
              Fn::GetAtt:
              - Lambda
              - Arn
        - Fn::If:
          - S3RuleTen
          - Ref: AWS::NoValue
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value:
                    Fn::Select:
                    - 9
                    - Ref: S3FolderNames
            Function:
              Fn::GetAtt:
              - Lambda
              - Arn
      Tags:
      - Key: Name
        Value:
          Ref: S3BucketName
      - Key: InfoClassification
        Value:
          Ref: InfoClassification
      - Key: ApplicationRole
        Value:
          Fn::Sub: ${ApplicationID}-BKT
      - Key: Environment
        Value:
          Ref: Environment
      - Key: ApplicationID
        Value:
          Ref: ApplicationID
      - Key: Project
        Value:
          Ref: Project
      - Key: Owner
        Value:
          Ref: Owner
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Deny
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
          Action:
          - s3:*
          Resource:
          - Fn::Sub: arn:aws:s3:::${S3BucketName}/*
          - Fn::Sub: arn:aws:s3:::${S3BucketName}
          Condition:
            Bool:
              aws:SecureTransport: false
      Bucket:
        Ref: S3Bucket
