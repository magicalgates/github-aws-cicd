AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template deploys a VPC,Flow Logs,IGW, NAT, Routetable & Asociation, 6 public and 6 private subnets spread across
  6 Availability Zones.Version 2.0.Here is the Readmefile link for more information https://github.com/idexcel-technologies-pvt-ltd/aws-infra-templates/blob/dev/subtitles/Ec2_Vpc.md.
  
Parameters:
  EnvironmentType:
    Description: Specify environment type.
    Type: String
  ResourceNamePrefix:
      Type: String
      Default: Nds-Cync-Los
      Description: Specify prefix for Resource Name.
  Purpose:
    Type: String
    Default: Ingress
    Description: "Specify the purpose of the Creation, example:Ingress,Egress..etc".
  VpcCIDR:
    Description: For New Vpc creation specify "Valid CIDR" or else "None".
    Type: String
    Default: 'None'
  VpcNewCidrBlock:
    Type: String
    Description: For Vpc CIDR addition to the Vpc, specify "Valid CIDR" or else "None".
    Default: 'None'
  SubnetAZs:
    Description: 'Please select the Availability Zone '
    Type: CommaDelimitedList
  VpcFlowLogsS3BucketName:
    Type: String
    Description:  Mention the bucket name for storing Flow Logs, If its left empty flow logs will not be created.
     
  PublicSubnetCIDRs:
    Type: CommaDelimitedList
    Default: 'None:None,None:None,None:None,None:None,None:None,None:None'
    Description: "Specify CIDRs for public subnets and specify the name of subnet, if you want to create mention valid subnet cidr and name ex: 10.0.1.0/24:Public,None:None..."
  PrivateSubnetCIDRs:
    Type: CommaDelimitedList
    Default: 'None:None,None:None,None:None,None:None,None:None,None:None' 
    Description: "Specify CIDRs for private subnets and specify the name of subnet, if you want to create mention valid subnet cidr and name ex: 10.0.2.0/24:Private,None:None..."

  TransitGatewayId:
    Type: String
    Description: Specify the TransitGatewayId for route creation
  PrivateTgwDestinationIps:
    Type: CommaDelimitedList
    Default: 'None,None,None,None,None,None,None,None,None,None' 
    Description: Specify list of ip's for tgw route creation for Private subnets.    
  
  ExistingVPCId :
    Type: String
    Description: Provide existing vpcid for new vpc cidr addition, extra subnet creation & flow logs.
    Default: "None"
  ExistingNATId :
    Type: String
    Description: To create New NAT resource mention "None" or Specify Any NATID, If it is not required leave the parameter empty.
  DefaultNatRouteRuleRequired:
    Type: String
    Description: Select True if NATGateway is required,If not select False.
    AllowedValues:
    - true
    - false
  ExistingIGWId :
    Type: String
    Description: To create New IGW resource mention "None" or Specify Any IgwID, If it is not required leave the parameter empty.
    Default: None
  DefaultIgwRouteRuleRequired:
    Type: String
    Description: Select True if InternetGateway is required,If not select False.
    AllowedValues:
    - true
    - false	    
  ExistingPublicSubnetId :
    Type: String
    Description: If you are not creating NATGateway with existing public subnet then give "None" &&& If creating through existing public subnet, mention public subnetid.
    Default: None
    
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Lable: 
          default: Naming Conventions
        Parameters:
          - EnvironmentType
          - ResourceNamePrefix
          - Purpose
      - Label:
          default: Existing Resources
        Parameters:
          - ExistingVPCId
          - DefaultNatRouteRuleRequired
          - ExistingNATId
          - DefaultIgwRouteRuleRequired
          - ExistingIGWId
          - ExistingPublicSubnetId
      - Lable: 
          default: VPC Details
        Parameters:
          - VpcCIDR
          - VpcNewCidrBlock
          - VpcFlowLogsS3BucketName
      - Lable: 
          default: Subnet Details
        Parameters:
          - PublicSubnetCIDRs
          - PrivateSubnetCIDRs
          - SubnetAZs
      - Label:
          default: TransitGateway Details
        Parameters:
         - TransitGatewayId
         - PrivateTgwDestinationIps	  
	
Conditions:
  IsFlowLogsRequired: !Not [!Equals [ !Ref VpcFlowLogsS3BucketName, ""]]  
 
  IsVPCRequired: !Not [!Equals [!Ref VpcCIDR, "None"]]
  IsExtraVpcCidrRequired: !Not [!Equals [!Ref VpcNewCidrBlock, "None"]]
  
  UseExitingIgw: !Equals [ !Ref ExistingIGWId, "None"]
  IsDefaultIgwRouteRuleRequired: !Equals [!Ref DefaultIgwRouteRuleRequired, "true"]
  
  UseExistingNat: !Equals [ !Ref ExistingNATId, "None"]
  IsDefaultNatRouteRuleRequired: !Equals [!Ref DefaultNatRouteRuleRequired, "true"]
  
  PublicSubnetCIDRs0Exist: !Not [!Equals [ !Select [0, !Ref PublicSubnetCIDRs], "None:None"]]
  PublicSubnetCIDRs1Exist: !Not [!Equals [ !Select [1, !Ref PublicSubnetCIDRs], "None:None"]]
  PublicSubnetCIDRs2Exist: !Not [!Equals [ !Select [2, !Ref PublicSubnetCIDRs], "None:None"]]
  PublicSubnetCIDRs3Exist: !Not [!Equals [ !Select [3, !Ref PublicSubnetCIDRs], "None:None"]]
  PublicSubnetCIDRs4Exist: !Not [!Equals [ !Select [4, !Ref PublicSubnetCIDRs], "None:None"]]
  PublicSubnetCIDRs5Exist: !Not [!Equals [ !Select [5, !Ref PublicSubnetCIDRs], "None:None"]]
  
  PrivateSubnetCIDRs0Exist: !Not [!Equals [ !Select [0, !Ref PrivateSubnetCIDRs], "None:None"]]
  PrivateSubnetCIDRs1Exist: !Not [!Equals [ !Select [1, !Ref PrivateSubnetCIDRs], "None:None"]]
  PrivateSubnetCIDRs2Exist: !Not [!Equals [ !Select [2, !Ref PrivateSubnetCIDRs], "None:None"]]
  PrivateSubnetCIDRs3Exist: !Not [!Equals [ !Select [3, !Ref PrivateSubnetCIDRs], "None:None"]]
  PrivateSubnetCIDRs4Exist: !Not [!Equals [ !Select [4, !Ref PrivateSubnetCIDRs], "None:None"]]
  PrivateSubnetCIDRs5Exist: !Not [!Equals [ !Select [5, !Ref PrivateSubnetCIDRs], "None:None"]]
  
  TgwDestinationPrivateIps0Exist: !Not [!Equals [ !Select [0, !Ref PrivateTgwDestinationIps], "None"]]
  TgwDestinationPrivateIps1Exist: !Not [!Equals [ !Select [1, !Ref PrivateTgwDestinationIps], "None"]]
  TgwDestinationPrivateIps2Exist: !Not [!Equals [ !Select [2, !Ref PrivateTgwDestinationIps], "None"]]
  TgwDestinationPrivateIps3Exist: !Not [!Equals [ !Select [3, !Ref PrivateTgwDestinationIps], "None"]]
  TgwDestinationPrivateIps4Exist: !Not [!Equals [ !Select [4, !Ref PrivateTgwDestinationIps], "None"]]
  TgwDestinationPrivateIps5Exist: !Not [!Equals [ !Select [5, !Ref PrivateTgwDestinationIps], "None"]]
  TgwDestinationPrivateIps6Exist: !Not [!Equals [ !Select [6, !Ref PrivateTgwDestinationIps], "None"]]
  TgwDestinationPrivateIps7Exist: !Not [!Equals [ !Select [7, !Ref PrivateTgwDestinationIps], "None"]]
  TgwDestinationPrivateIps8Exist: !Not [!Equals [ !Select [8, !Ref PrivateTgwDestinationIps], "None"]]
  TgwDestinationPrivateIps9Exist: !Not [!Equals [ !Select [9, !Ref PrivateTgwDestinationIps], "None"]]
  
  
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Condition: IsVPCRequired    
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}-Vpc'
        - Key: ApplicationRole
          Value: Network-Vpc
  VPCCidrBlock:
    Type: 'AWS::EC2::VPCCidrBlock'
    Condition: IsExtraVpcCidrRequired
    Properties:
      CidrBlock: !Ref VpcNewCidrBlock
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Condition: UseExitingIgw
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}-Igw'
        - Key: ApplicationRole
          Value: Network-Igw
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Condition: UseExitingIgw
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
    DependsOn: InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Condition: PublicSubnetCIDRs0Exist    
    Properties:
      AvailabilityZone: !Select [0, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 0, !Ref PublicSubnetCIDRs]]]
      VpcId:
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId      
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 0, !Ref PublicSubnetCIDRs]]], !Select [0, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-PublicSubnet1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: PublicSubnetCIDRs1Exist    
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      AvailabilityZone: !Select [1, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 1, !Ref PublicSubnetCIDRs]]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 1, !Ref PublicSubnetCIDRs]]], !Select [1, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-PublicSubnet2
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: PublicSubnetCIDRs2Exist    
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      AvailabilityZone: !Select [2, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 2, !Ref PublicSubnetCIDRs]]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 2, !Ref PublicSubnetCIDRs]]], !Select [2, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-PublicSubnet3
  PublicSubnet4:
    Type: 'AWS::EC2::Subnet'
    Condition: PublicSubnetCIDRs3Exist    
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      AvailabilityZone: !Select [3, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 3, !Ref PublicSubnetCIDRs]]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 3, !Ref PublicSubnetCIDRs]]], !Select [3, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-PublicSubnet4
  PublicSubnet5:
    Type: 'AWS::EC2::Subnet'
    Condition: PublicSubnetCIDRs4Exist    
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      AvailabilityZone: !Select [4, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 4, !Ref PublicSubnetCIDRs]]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 4, !Ref PublicSubnetCIDRs]]], !Select [4, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-PublicSubnet5
  PublicSubnet6:
    Type: 'AWS::EC2::Subnet'
    Condition: PublicSubnetCIDRs5Exist    
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      AvailabilityZone: !Select [5, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 5, !Ref PublicSubnetCIDRs]]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 5, !Ref PublicSubnetCIDRs]]], !Select [5, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-PublicSubnet6
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Condition: PrivateSubnetCIDRs0Exist    
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      AvailabilityZone: !Select [0, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 0, !Ref PrivateSubnetCIDRs]]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 0, !Ref PrivateSubnetCIDRs]]], !Select [0, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-PrivateSubnet1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: PrivateSubnetCIDRs1Exist
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      AvailabilityZone: !Select [1, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 1, !Ref PrivateSubnetCIDRs]]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 1, !Ref PrivateSubnetCIDRs]]], !Select [1, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-PrivateSubnet2
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: PrivateSubnetCIDRs2Exist
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      AvailabilityZone: !Select [2, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 2, !Ref PrivateSubnetCIDRs]]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 2, !Ref PrivateSubnetCIDRs]]], !Select [2, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-AppSubnet3
  PrivateSubnet4:
    Type: 'AWS::EC2::Subnet'
    Condition: PrivateSubnetCIDRs3Exist
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      AvailabilityZone: !Select [3, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 3, !Ref PrivateSubnetCIDRs]]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 3, !Ref PrivateSubnetCIDRs]]], !Select [3, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-PrivateSubnet4   
  PrivateSubnet5:
    Type: 'AWS::EC2::Subnet'
    Condition: PrivateSubnetCIDRs4Exist
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      AvailabilityZone: !Select [4, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 4, !Ref PrivateSubnetCIDRs]]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 4, !Ref PrivateSubnetCIDRs]]], !Select [4, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-PrivateSubnet5  
  PrivateSubnet6:
    Type: 'AWS::EC2::Subnet'
    Condition: PrivateSubnetCIDRs5Exist
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      AvailabilityZone: !Select [5, !Ref SubnetAZs]
      CidrBlock: !Select [ 0, !Split [ ":", !Select [ 5, !Ref PrivateSubnetCIDRs]]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "-" ,[ !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}',!Select [ 1, !Split [ ":", !Select [ 5, !Ref PrivateSubnetCIDRs]]], !Select [5, !Ref SubnetAZs]]]
        - Key: ApplicationRole
          Value: Network-PrivateSubnet6
  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Condition: UseExistingNat 
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}-NatEip'
        - Key: ApplicationRole
          Value: Network-NatEip
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Condition: UseExistingNat     
    Properties:
      AllocationId: !GetAtt 
        - NatGatewayEIP
        - AllocationId
      SubnetId: 
        !If
        - PublicSubnetCIDRs0Exist
        - !Ref PublicSubnet1
        - !Ref ExistingPublicSubnetId
      
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}-NatGateway'
        - Key: ApplicationRole
          Value: Network-NatGateway		  
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Condition: PublicSubnetCIDRs0Exist
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}-PublicRouteTable'
        - Key: ApplicationRole
          Value: Network-PublicRouteTable
  PublicRouteRule:
    Type: 'AWS::EC2::Route'
    Condition: IsDefaultIgwRouteRuleRequired
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        !If
        - UseExitingIgw
        - !Ref InternetGateway 
        - !Ref ExistingIGWId
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PublicSubnetCIDRs0Exist
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PublicSubnetCIDRs1Exist
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PublicSubnetCIDRs2Exist
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PublicSubnet4RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PublicSubnetCIDRs3Exist
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet4
  PublicSubnet5RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PublicSubnetCIDRs4Exist
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet5
  PublicSubnet6RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PublicSubnetCIDRs5Exist
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet6
  PrivateRouteRule:
    Type: 'AWS::EC2::Route'
    Condition: IsDefaultNatRouteRuleRequired     
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        !If
        - UseExistingNat
        - !Ref NatGateway 
        - !Ref ExistingNATId
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Condition: PrivateSubnetCIDRs0Exist      
    Properties:
      VpcId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}-PrivateRouteTable'
        - Key: ApplicationRole
          Value: Network-PrivateRouteTable
      
  Private1SubnetRouteRule:
    Type: 'AWS::EC2::Route'
    Condition: TgwDestinationPrivateIps0Exist      
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Select [ 0, !Ref PrivateTgwDestinationIps]
      TransitGatewayId: !Ref TransitGatewayId
  PrivateSubnet2RouteRule:
    Type: 'AWS::EC2::Route'
    Condition: TgwDestinationPrivateIps1Exist      
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Select [ 1, !Ref PrivateTgwDestinationIps]
      TransitGatewayId: !Ref TransitGatewayId
  Private3SubnetRouteRule:
    Type: 'AWS::EC2::Route'
    Condition: TgwDestinationPrivateIps2Exist      
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Select [ 2, !Ref PrivateTgwDestinationIps]
      TransitGatewayId: !Ref TransitGatewayId
  Private4SubnetRouteRule:
    Type: 'AWS::EC2::Route'
    Condition: TgwDestinationPrivateIps3Exist      
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Select [ 3, !Ref PrivateTgwDestinationIps]
      TransitGatewayId: !Ref TransitGatewayId
  Private5SubnetRouteRule:
    Type: 'AWS::EC2::Route'
    Condition: TgwDestinationPrivateIps4Exist      
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Select [ 4, !Ref PrivateTgwDestinationIps]
      TransitGatewayId: !Ref TransitGatewayId
  Private6SubnetRouteRule:
    Type: 'AWS::EC2::Route'
    Condition: TgwDestinationPrivateIps5Exist      
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Select [ 5, !Ref PrivateTgwDestinationIps]
      TransitGatewayId: !Ref TransitGatewayId 
  Private7SubnetRouteRule:
    Type: 'AWS::EC2::Route'
    Condition: TgwDestinationPrivateIps5Exist      
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Select [ 6, !Ref PrivateTgwDestinationIps]
      TransitGatewayId: !Ref TransitGatewayId     
  Private8SubnetRouteRule:
    Type: 'AWS::EC2::Route'
    Condition: TgwDestinationPrivateIps3Exist      
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Select [ 7, !Ref PrivateTgwDestinationIps]
      TransitGatewayId: !Ref TransitGatewayId
  Private9SubnetRouteRule:
    Type: 'AWS::EC2::Route'
    Condition: TgwDestinationPrivateIps4Exist      
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Select [ 8, !Ref PrivateTgwDestinationIps]
      TransitGatewayId: !Ref TransitGatewayId
  Private10SubnetRouteRule:
    Type: 'AWS::EC2::Route'
    Condition: TgwDestinationPrivateIps5Exist      
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Select [ 9, !Ref PrivateTgwDestinationIps]
      TransitGatewayId: !Ref TransitGatewayId         
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PrivateSubnetCIDRs0Exist    
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PrivateSubnetCIDRs1Exist
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PrivateSubnetCIDRs2Exist
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
  PrivateSubnet4RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PrivateSubnetCIDRs3Exist
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet4 
  PrivateSubnet5RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PrivateSubnetCIDRs4Exist
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet5
  PrivateSubnet6RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: PrivateSubnetCIDRs5Exist
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet6	  
        
  FlowLogs:
    Type: 'AWS::EC2::FlowLog'
    Condition: IsFlowLogsRequired    
    Properties:
      ResourceType: VPC
      ResourceId: 
        !If
        - IsVPCRequired
        - !Ref VPC 
        - !Ref ExistingVPCId     
      TrafficType: ALL
      LogDestinationType: s3
      LogDestination: !Ref VpcFlowLogsS3BucketName
      Tags: 
      - Key: Name
        Value: !Sub '${ResourceNamePrefix}-${EnvironmentType}-${Purpose}-Vpc-FlowLogs'
      - Key: ApplicationRole
        Value: Network-FlowLogs
      - Key: Environment
        Value: 
          Ref: EnvironmentType
      - Key: ApplicationID
        Value: Network